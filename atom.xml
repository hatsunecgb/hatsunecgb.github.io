<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哼着小曲儿的度奈君</title>
  
  <subtitle>念念不忘,必有回响</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-28T04:52:06.874Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>度奈</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS基础之原型和原型链(原型链)</title>
    <link href="http://yoursite.com/2017/10/28/JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2017/10/28/JS基础之原型和原型链-原型链/</id>
    <published>2017-10-28T04:43:53.000Z</published>
    <updated>2017-10-28T04:52:06.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name,age</span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>,name = name</div><div class="line">&#125;</div><div class="line">Foo.prototype.alertName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">alert(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建示例</span></div><div class="line"><span class="keyword">var</span> f= <span class="keyword">new</span> Foo(<span class="string">'张三'</span>)</div><div class="line">f.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log (<span class="keyword">this</span>.name)</div><div class="line"><span class="comment">//测试</span></div><div class="line">f.printName()</div><div class="line">f.alertName()</div><div class="line">f.toString() <span class="comment">//要去f.\_proto\_.\_proto\_中查找</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.imgur.com/N8nBB63.png" alt=""><br><img src="https://i.imgur.com/rtyYZWy.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</div><div class="line"><span class="built_in">console</span>.log(a.__proto__); <span class="comment">//A &#123;&#125;（即构造器function A 的原型对象）</span></div><div class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__); <span class="comment">//Object &#123;&#125;（即构造器function Object 的原型对象）</span></div><div class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__.__proto__); <span class="comment">//null</span></div></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.cnblogs.com/shuiyi/p/5305435.html" target="_blank" rel="external">http://www.cnblogs.com/shuiyi/p/5305435.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name = name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Foo.prototype.alertName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建示例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(&lt;span class=&quot;string&quot;&gt;&#39;张三&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f.printName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//测试&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f.printName()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f.alertName()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f.toString() &lt;span class=&quot;comment&quot;&gt;//要去f.\_proto\_.\_proto\_中查找&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS基础之原型和原型链(原型)</title>
    <link href="http://yoursite.com/2017/10/25/JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/10/25/JS基础之原型和原型链-原型/</id>
    <published>2017-10-25T14:59:37.000Z</published>
    <updated>2017-10-28T02:57:26.718Z</updated>
    
    <content type="html"><![CDATA[<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name,age</span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name</div><div class="line"><span class="keyword">this</span>.age = age</div><div class="line"><span class="keyword">this</span>.class = <span class="string">'class-1'</span></div><div class="line"><span class="comment">//return this  //默认有这一行</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(<span class="string">'张三'</span>,<span class="number">20</span>)</div><div class="line"><span class="comment">//var f1 = new Foo ('李四',22)  //创建多个对象</span></div></pre></td></tr></table></figure><a id="more"></a><h4 id="构造函数-拓展"><a href="#构造函数-拓展" class="headerlink" title="构造函数-拓展"></a>构造函数-拓展</h4><ul><li>var a = {} 其实是 var a = new Object 的语法糖</li><li>var a = [] 其实是 var a = new Array() 的语法糖</li><li>function Foo(){…} 其实是var Foo = new Function(…)</li><li>使用instanceof判断一个函数是否是一个变量的构造函数</li></ul><p><code>判断一个变量是否为&quot;数组&quot;,变量 instanceof Array</code></p><h3 id="原型规则和示例"><a href="#原型规则和示例" class="headerlink" title="原型规则和示例"></a>原型规则和示例</h3><ul><li>所有的引用类型(数组,对象,函数),都具有对象特性,即可自由拓展属性(‘null’除外)</li><li>所有的引用类型(数组,对象,函数),都具有一个<strong>_proto_属性(隐式原型)</strong>,属性值是一个普通对象</li><li>所有的函数都有一个<strong>prototype(显式原型)</strong>属性,属性值也是一个普通对象</li><li>所有的引用类型(数组,对象,函数),<strong>_proto_属性</strong>指向它的构造函数的<strong>“prototype”属性值</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;; obj.a = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> arr = []; arr.a = <span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">fn.a - <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.\_proto_);</div><div class="line"><span class="built_in">console</span>.log(arr.\_proto_);</div><div class="line"><span class="built_in">console</span>.log(fn.\_proto_);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(fn.prototype);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.\_proto_===<span class="built_in">Object</span>.prototype);</div></pre></td></tr></table></figure><p><strong>当试图得到一个对象的某个属性时,如果这个对象本身没有这个属性,那么会去它的_proto_(即它的构造函数的prototype)中寻找</strong><br><code>console.log(obj._proto_===Object.prototype)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name,age</span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>,name = name</div><div class="line">&#125;</div><div class="line">Foo.prototype.alertName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">alert(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建示例</span></div><div class="line"><span class="keyword">var</span> f= <span class="keyword">new</span> Foo(<span class="string">'张三'</span>)</div><div class="line">f.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log (<span class="keyword">this</span>.name)</div><div class="line"><span class="comment">//测试</span></div><div class="line">f.printName()</div><div class="line">f.alertName()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="循环对象自身的属性"><a href="#循环对象自身的属性" class="headerlink" title="循环对象自身的属性"></a>循环对象自身的属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> item</div><div class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> f)&#123;</div><div class="line"><span class="comment">//高级浏览器已经在for in 中屏蔽了来自原型的属性</span></div><div class="line"><span class="comment">//但这里建议还是加上这个判断,保证程序的健壮性</span></div><div class="line"><span class="keyword">if</span>(f.hasOwnProperty(item)) &#123;</div><div class="line"><span class="built_in">console</span>.log(item)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.class = &lt;span class=&quot;string&quot;&gt;&#39;class-1&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//return this  //默认有这一行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(&lt;span class=&quot;string&quot;&gt;&#39;张三&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//var f1 = new Foo (&#39;李四&#39;,22)  //创建多个对象&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS基础之变量类型和计算</title>
    <link href="http://yoursite.com/2017/10/25/JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AE%A1%E7%AE%97/"/>
    <id>http://yoursite.com/2017/10/25/JS基础之变量类型和计算/</id>
    <published>2017-10-25T14:30:23.000Z</published>
    <updated>2017-10-25T14:56:19.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> underfined <span class="comment">//underfined</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span> <span class="comment">//string</span></div><div class="line"><span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">//number</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">//boolean</span></div><div class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">//object</span></div><div class="line"><span class="keyword">typeof</span> [] <span class="comment">//object</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//object</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log</div></pre></td></tr></table></figure><p><strong>typeof能识基本数据类型,引用类型无法区分,只能把函数区分出来</strong><br><a id="more"></a></p><h3 id="变量计算-强制类型转换情况"><a href="#变量计算-强制类型转换情况" class="headerlink" title="变量计算 - 强制类型转换情况"></a>变量计算 - 强制类型转换情况</h3><ul><li>字符串拼接</li><li>==运算符</li><li>if语句</li><li>逻辑运算</li></ul><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">100</span>+<span class="number">10</span> <span class="comment">//10</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">100</span>+<span class="string">'10'</span> <span class="comment">//'10010'</span></div></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="==运算符"></a>==运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">100</span> == <span class="string">'100'</span> <span class="comment">//true</span></div><div class="line"><span class="number">0</span> ==<span class="string">''</span> /<span class="literal">true</span></div><div class="line"><span class="literal">null</span> == underfined <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (obj.a == <span class="literal">null</span>) &#123;</div><div class="line"><span class="comment">//这里相当于 obj,a === null || obj.a === underfined简写形式</span></div><div class="line"><span class="comment">//这是jquery源码中推荐的写法</span></div><div class="line"><span class="comment">//强迫症,其他一律 "==="</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="literal">true</span></div><div class="line"><span class="keyword">if</span>(a) &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="number">100</span></div><div class="line"><span class="keyword">if</span>(b) &#123; <span class="comment">//true</span></div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = <span class="string">''</span></div><div class="line"><span class="keyword">if</span>(c)&#123; <span class="comment">//false</span></div><div class="line"><span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &amp;&amp; <span class="number">0</span>) <span class="comment">//0</span></div><div class="line">conlosle.log(<span class="string">''</span> || <span class="string">'abc'</span>) <span class="comment">//'abc'</span></div><div class="line"><span class="built_in">console</span>.log(!<span class="built_in">window</span>.abc) <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">//判断一个变量会被当做true还是false</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">100</span></div><div class="line"><span class="built_in">console</span>.log(!!a)</div></pre></td></tr></table></figure><h4 id="js中内置函数"><a href="#js中内置函数" class="headerlink" title="js中内置函数"></a>js中内置函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span></div><div class="line"><span class="built_in">Array</span></div><div class="line"><span class="built_in">Boolean</span></div><div class="line"><span class="built_in">Number</span></div><div class="line"><span class="built_in">String</span></div><div class="line"><span class="built_in">Function</span></div><div class="line"><span class="built_in">Date</span></div><div class="line"><span class="built_in">RegExp</span></div><div class="line"><span class="built_in">Error</span></div></pre></td></tr></table></figure><h4 id="js按储存方式区分变量类型"><a href="#js按储存方式区分变量类型" class="headerlink" title="js按储存方式区分变量类型"></a>js按储存方式区分变量类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//值类型</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span></div><div class="line"><span class="keyword">var</span> b = a</div><div class="line">a = <span class="number">11</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">//10</span></div><div class="line"></div><div class="line"><span class="comment">//引用类型</span></div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</div><div class="line"><span class="keyword">var</span> obj2 = obj1</div><div class="line">obj1.x = <span class="number">200</span></div><div class="line"><span class="built_in">console</span>.log(obj2,x) <span class="comment">//200</span></div></pre></td></tr></table></figure><h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><p>json只不过是一种JS对象而已<br><code>JSON.stringify({a:10,b:20})</code><br><code>JSON.parse(&#39;{&quot;a&quot;:10,&quot;b&quot;:20}&#39;)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;typeof运算符&quot;&gt;&lt;a href=&quot;#typeof运算符&quot; class=&quot;headerlink&quot; title=&quot;typeof运算符&quot;&gt;&lt;/a&gt;typeof运算符&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; underfined &lt;span class=&quot;comment&quot;&gt;//underfined&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//string&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//number&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//boolean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; [] &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;typeof能识基本数据类型,引用类型无法区分,只能把函数区分出来&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之引用类型(二)</title>
    <link href="http://yoursite.com/2017/10/22/JavaScript%E4%B9%8B%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B-%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/10/22/JavaScript之引用类型-二/</id>
    <published>2017-10-22T03:07:24.000Z</published>
    <updated>2017-10-22T06:50:41.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h3><p>Date 对象用于处理日期和时间。<br>可以通过 new 关键词来定义 Date 对象。<a id="more"></a>以下代码定义了名为 myDate 的 Date 对象：<br>有四种方式初始化日期:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// 当前日期和时间</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(milliseconds) <span class="comment">//返回从 1970 年 1 月 1 日至今的毫秒数</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(dateString)</div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(year, month, day, hours, minutes, seconds, milliseconds)</div></pre></td></tr></table></figure></p><p>上面的参数大多数都是可选的，在不指定的情况下，默认参数是0。<br>实例化一个日期的一些例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"October 13, 1975 11:13:00"</span>)</div><div class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">79</span>,<span class="number">5</span>,<span class="number">24</span>)</div><div class="line"><span class="keyword">var</span> d3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">79</span>,<span class="number">5</span>,<span class="number">24</span>,<span class="number">11</span>,<span class="number">33</span>,<span class="number">0</span>)</div></pre></td></tr></table></figure></p><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><p><a href="http://www.runoob.com/jsref/jsref-obj-date.html" title="对象方法" target="_blank" rel="external">http://www.runoob.com/jsref/jsref-obj-date.html</a></p><h3 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h3><p>ECMAScripy通过RegExp类型来支持正则表达式.使用下面类似Perl的语法,就可以创建一个正则表达式.<br><code>var patt=/pattern/modifiers;</code>  </p><ul><li>pattern（模式） 描述了表达式的模式</li><li>modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配<br><strong>正则表达式是描述字符模式的对象。<br>正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</strong><h4 id="对象方法-1"><a href="#对象方法-1" class="headerlink" title="对象方法"></a>对象方法</h4><a href="http://www.runoob.com/jsref/jsref-obj-regexp.html" title="对象方法" target="_blank" rel="external">http://www.runoob.com/jsref/jsref-obj-regexp.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Date类型&quot;&gt;&lt;a href=&quot;#Date类型&quot; class=&quot;headerlink&quot; title=&quot;Date类型&quot;&gt;&lt;/a&gt;Date类型&lt;/h3&gt;&lt;p&gt;Date 对象用于处理日期和时间。&lt;br&gt;可以通过 new 关键词来定义 Date 对象。
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之引用类型(一)</title>
    <link href="http://yoursite.com/2017/10/22/JavaScript%E4%B9%8B%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B-%E4%B8%80/"/>
    <id>http://yoursite.com/2017/10/22/JavaScript之引用类型-一/</id>
    <published>2017-10-22T02:36:24.000Z</published>
    <updated>2017-10-22T06:29:06.079Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h3><h4 id="创建Object实例方法-字面量表示法"><a href="#创建Object实例方法-字面量表示法" class="headerlink" title="创建Object实例方法-字面量表示法"></a>创建Object实例方法-字面量表示法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">name : <span class="string">"jack"</span></div><div class="line">age : <span class="number">29</span> </div><div class="line">&#125;;</div></pre></td></tr></table></figure><a id="more"></a><h4 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(person.name); <span class="comment">//jack</span></div></pre></td></tr></table></figure><h3 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h3><h4 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h4><p><code>var num = [1,2,3,4,5,6]</code></p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p><code>var n = num[0]</code></p><h4 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h4><p><img src="https://i.imgur.com/CTWyuPq.png" alt=""></p><h4 id="Array-对象属性"><a href="#Array-对象属性" class="headerlink" title="Array 对象属性"></a>Array 对象属性</h4><p><img src="https://i.imgur.com/ZtO0yO2.png" alt=""><br><img src="https://i.imgur.com/zTifXpY.png" alt=""></p><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span> (<span class="params">v1,v2</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> v2 - v1;</div><div class="line">values.sort(compare);</div><div class="line">alert (values); <span class="comment">//1,2,3,4,5,6</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h4><p><a href="http://www.runoob.com/js/js-obj-array.html" title="更多实例" target="_blank" rel="external">http://www.runoob.com/js/js-obj-array.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Object类型&quot;&gt;&lt;a href=&quot;#Object类型&quot; class=&quot;headerlink&quot; title=&quot;Object类型&quot;&gt;&lt;/a&gt;Object类型&lt;/h3&gt;&lt;h4 id=&quot;创建Object实例方法-字面量表示法&quot;&gt;&lt;a href=&quot;#创建Object实例方法-字面量表示法&quot; class=&quot;headerlink&quot; title=&quot;创建Object实例方法-字面量表示法&quot;&gt;&lt;/a&gt;创建Object实例方法-字面量表示法&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	name : &lt;span class=&quot;string&quot;&gt;&quot;jack&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	age : &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之执行环境及作用域</title>
    <link href="http://yoursite.com/2017/10/18/JavaScript%E4%B9%8B%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2017/10/18/JavaScript之执行环境及作用域/</id>
    <published>2017-10-18T11:27:40.000Z</published>
    <updated>2017-10-18T12:07:02.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h3><h4 id="全局执行环境"><a href="#全局执行环境" class="headerlink" title="全局执行环境"></a>全局执行环境</h4><p><strong>执行环境定义了变量或函数有权访问的其他数据,决定了他们各自的行为</strong><br>每个执行环境都有个与之关联的变量对象,环境中定义的所有变量和函数都保存在这个对象中.虽然我们编写的代码无法访问这个对象,但解析器在处理数据时会在后台使用它.  <a id="more"></a><br>全局执行环境是最外围的一个执行环境.根据ECMAScript实现所在的宿主环境不同,表示执行环境的对象也不一样.在Web浏览器中,全局执行环境被认为是windows对象,因此所有全局变量的函数都是作为windows对象的属性和方法创建的.某个执行环境中的所有代码执行完毕后,该环境被销毁,保存在其中的所有变量和函数定义也随之销毁(全局执行环境直到应用程序退出—例如关闭网页或浏览器–时才会被销毁)</p><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>当代码在一个环境中执行时,会创建变量对象的一个作用域链<br>作用域链的用途是<strong>保证对执行环境有权访问的所有变量和函数的有序访问</strong>.作用域链的前端,始终都是当前执行的代码所在环境的变量对象.如果这个环境是函数,则将其活动对象作为变量对象.<br>活动对象在最开始时只包含一个变量,即arguments对象(这个对象在全局环境中是不存在的).<br>作用域链中的下一个变量对象来自包含(外部)环境,而再下一个变量对象则来自下一个包含环境.这样,一直延续到全局执行环境;全局执行环境的变量对象始终都是作用域链中的最后一个对象<br><strong>内部环境可以通过作用域链访问外部环境.外部环境不能访问内部环境中的任何变量和数据</strong><br><img src="https://i.imgur.com/e2udIRU.png" alt=""></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h4><ul><li>执行环境有全局执行环境和函数执行环境之分</li><li>每次进入一个新执行环境,都会创建一个用于搜索变量和函数的作用域链</li><li>函数的局部环境不仅有权访问函数作用域中的变量,而且有权访问其包含(父)环境,耐着全局环境.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;执行环境及作用域&quot;&gt;&lt;a href=&quot;#执行环境及作用域&quot; class=&quot;headerlink&quot; title=&quot;执行环境及作用域&quot;&gt;&lt;/a&gt;执行环境及作用域&lt;/h3&gt;&lt;h4 id=&quot;全局执行环境&quot;&gt;&lt;a href=&quot;#全局执行环境&quot; class=&quot;headerlink&quot; title=&quot;全局执行环境&quot;&gt;&lt;/a&gt;全局执行环境&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;执行环境定义了变量或函数有权访问的其他数据,决定了他们各自的行为&lt;/strong&gt;&lt;br&gt;每个执行环境都有个与之关联的变量对象,环境中定义的所有变量和函数都保存在这个对象中.虽然我们编写的代码无法访问这个对象,但解析器在处理数据时会在后台使用它.
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之函数</title>
    <link href="http://yoursite.com/2017/10/15/JavaScript%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/10/15/JavaScript之函数/</id>
    <published>2017-10-15T07:21:16.000Z</published>
    <updated>2017-10-15T10:49:42.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>ECMAScript中的函数在定义时不必指定是否返回值.实际上,任何函数在任何时候都可以通过return语句后跟要返回的值来实现返回值.return后的句子永远不会执行.<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1+num2</span>) </span>&#123;</div><div class="line">retuen num1+num2;</div><div class="line">alert(<span class="string">"hello"</span>) <span class="comment">//永远不会执行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>另外 ,return语句也可以不带有任何返回值.在这种情况下,函数在停止执行后将返回undefined值.这种用法一般用在<strong>需要提前停止函数执行而又不需要返回值的情况下</strong></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>ECMAScript函数不介意传递进来多少个参数,也不在乎传进来参数是什么类型的.<br>原因是<strong>ECMAScript中的参数在内部是用一个数组来表示的</strong>,函数接收到的始终都是这个数组,而不关心数组中包含哪些参数(如果有参数的话).<br>在函数体内可以通过arguments对象来访问这个参数数组,从而获取传递给函数的每一个参数.<br>另外,arguments对象只是与数组类似(<strong>它并不是Array的实例</strong>),因为可以使用方括号语法访问它的每一个元素(arguments[0],arguments[1])使用length属性来确定传递进来多少个参数.<br>这也说明了ECMAScript函数的一个重要特点:命名的参数值提供便利,但不是必须.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">funciton howManyArgs() &#123;</div><div class="line">alert (<span class="built_in">arguments</span>.length);</div><div class="line">&#125;</div><div class="line">howManyArgs(<span class="string">"string"</span>,<span class="number">56</span>); <span class="comment">//2</span></div><div class="line">howManyArgs( ); <span class="comment">//0</span></div><div class="line">howManyArgs(<span class="number">56</span>); <span class="comment">//1</span></div></pre></td></tr></table></figure><p>可以利用这个特点模拟重载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">1</span>)&#123;</div><div class="line">alert(<span class="built_in">arguments</span>[<span class="number">0</span>]+<span class="number">10</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length ==<span class="number">2</span>) &#123;</div><div class="line">alert(<span class="built_in">arguments</span>[<span class="number">0</span>]+<span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">doAdd(<span class="number">10</span>); <span class="comment">//20</span></div><div class="line">doAdd(<span class="number">30</span>,<span class="number">20</span>); <span class="comment">//50</span></div></pre></td></tr></table></figure><p>另外,<strong>arguments对象可以和命名参数一起使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1,num2</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">1</span>) &#123;</div><div class="line">alert(num1+<span class="number">10</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>)&#123;</div><div class="line">alert(<span class="built_in">arguments</span>[<span class="number">0</span>]+num2);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><ul><li>ECMAScript没有签名概念,因为其函数参数是以一个包含零或多个值的数组形式.</li><li>可以向ECMAScript函数传递任意数量的参数,并且可以通过arguments对象来访问这些参数.</li><li>由于不存在函数签名特性,ECMAScript函数不能重载</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;返回值&quot;&gt;&lt;a href=&quot;#返回值&quot; class=&quot;headerlink&quot; title=&quot;返回值&quot;&gt;&lt;/a&gt;返回值&lt;/h3&gt;&lt;p&gt;ECMAScript中的函数在定义时不必指定是否返回值.实际上,任何函数在任何时候都可以通过return语句后跟要返回的值来实现返回值.return后的句子永远不会执行.&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之基本数据类型</title>
    <link href="http://yoursite.com/2017/10/14/JavaScript%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/10/14/JavaScript之基本数据类型/</id>
    <published>2017-10-14T14:03:36.000Z</published>
    <updated>2017-10-15T10:54:16.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span>操作符</div><div class="line"><span class="literal">undefined</span> :未定义</div><div class="line">boolean :布尔值</div><div class="line">string :字符串</div><div class="line">numbert :数字</div><div class="line">object 对象或者<span class="literal">null</span></div><div class="line"><span class="function"><span class="keyword">function</span> :函数</span></div></pre></td></tr></table></figure><a id="more"></a><h4 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(<span class="keyword">typeof</span> 未声明变量) <span class="comment">//undefined</span></div><div class="line">alert(<span class="keyword">typeof</span> 已经声明变量但未定义) <span class="comment">//undefined</span></div><div class="line">注意:即使未初始化的变量会自动赋予<span class="literal">undefined</span>,但我们仍然建议手动初始化(即在声明变量的同时对变量进行赋值),如果能够做到这一点,那么当<span class="keyword">typeof</span>操作符返回<span class="literal">undefined</span>值是,我们就知道被检测的变量是还没有被声明的,而不是尚未被初始化的了</div></pre></td></tr></table></figure><h4 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> car = <span class="literal">null</span>;</div><div class="line">alert(<span class="keyword">typeof</span> car); <span class="comment">//'object'</span></div><div class="line">如果定义的变量将来要用于保存对象,那么最好将该变量初始化为<span class="literal">null</span>而不是其他值 这样一来,只要检查相应的<span class="literal">null</span>值就可以知道相应的变量是否已经保存一个对象的应用了,如下:</div><div class="line"><span class="keyword">if</span> (car != <span class="literal">null</span>)&#123;</div><div class="line">    <span class="comment">//对car对象执行某些操作</span></div><div class="line">&#125;</div><div class="line">实际上<span class="literal">undefined</span>值是派生自<span class="literal">null</span>值的,所以</div><div class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></div><div class="line">尽管有这样的关系,但他们的用处完全不同,无论在什么情况下都没有必要显式的的设置underfined,而对于<span class="literal">null</span>来说只要意在保存对象的变量还没有真正保存对象,就应该明确的让变量保存<span class="literal">null</span>值,这样做不仅可以体现<span class="literal">null</span>作为空指针的惯例,而且有助于进一步区分<span class="literal">null</span>和<span class="literal">undefined</span>.</div></pre></td></tr></table></figure><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span> 和 <span class="literal">false</span> 区分大小写</div><div class="line">虽然boolean类型的字面值只有两个,但ECMAscript中所有类型的值都有雨这两个boolean值等价的值.</div><div class="line">要将一个值转换为其对应的boolean值,可以调用转型函数<span class="built_in">Boolean</span>() 如下:</div><div class="line"><span class="keyword">var</span> message = Hello World<span class="string">";</span></div><div class="line"><span class="string">var messageAsBoolean = Boolean(message);</span></div><div class="line"><span class="string">可以对任何数据类型的值调用Boolean()函数,而且总会返回一个Boolean值.至于返回Ture还是false,参考以下:</span></div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/w74RNMy.png" alt=""></p><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">最基本的数值字面量格式是十进制:</div><div class="line"><span class="keyword">var</span> intNum = <span class="number">55</span>;</div><div class="line">还可以使用<span class="number">8</span> <span class="number">16</span> 进制</div><div class="line"></div><div class="line"><span class="number">1.</span>浮点数</div><div class="line">ECMAscrift会不失时机的将浮点数转化为整数(如果小数点后没有任何数字,或者其本身就是一个整数)</div><div class="line"></div><div class="line">对于极大或极小的数值,可以用e表示法(科学计数法) 例:</div><div class="line"><span class="keyword">var</span> floatNum = <span class="number">3.125e7</span>; <span class="comment">//等于31250000 此时e的表示法实际含义就是3.125乘以10的7次方</span></div><div class="line">e表示法也可以表示极小的数,如<span class="number">0</span>,<span class="number">00000000000000003</span>,这个数值可以表示为<span class="number">3e-17</span></div><div class="line"></div><div class="line">浮点数的最高精度是<span class="number">17</span>位,在其进行计算时其精度远远不如整数.所以<span class="number">0.1</span>+<span class="number">0.2</span>=<span class="number">0.30000000000000004</span></div><div class="line"></div><div class="line"><span class="number">2.</span>数值范围</div><div class="line">最大值: <span class="built_in">Number</span>.MAX_VALUE</div><div class="line">最小值: <span class="built_in">Number</span>.MIN_VALUE</div><div class="line">如果在某次计算中得到了超出JavaScript数值范围的值,那么这个数值将被自动转换为特殊的<span class="literal">Infinity</span>(无穷大)值</div><div class="line">如果是负数,就是-<span class="literal">Infinity</span></div><div class="line"><span class="keyword">var</span> result = <span class="built_in">Number</span>.MAX_VALUE + <span class="built_in">Number</span>.MIN_VALUE;</div><div class="line"><span class="built_in">isFinite</span>() 检测有穷的函数</div><div class="line">alert(inFinite(result)); <span class="comment">//false</span></div><div class="line">访问<span class="built_in">Number</span>.NEGATIVE_INFINITY和<span class="built_in">Number</span>.POSITIVE_INFINITY也可以得到正和负<span class="literal">Infinity</span>的值,可以想见,这两个属性中分别保存着-<span class="literal">Infinity</span>和<span class="literal">Infinity</span>.</div></pre></td></tr></table></figure><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">特点:</div><div class="line"><span class="number">1</span>:任何涉及<span class="literal">NaN</span>的操作都会返回<span class="literal">NaN</span></div><div class="line"><span class="number">2</span>:<span class="literal">NaN</span>与任何值都不相等,包括其本身</div><div class="line"><span class="built_in">isNaN</span>() 函数</div><div class="line">接受一个参数,该函数帮我们确定其是否<span class="string">"不是数值"</span></div><div class="line"><span class="built_in">isNaN</span>在接受到一个值之后,会尝试讲这个值转换为数值.某些不是数值的值会直接转换为数值.而任何不能被转换为数值的值都会导致这个函数返回<span class="literal">true</span></div><div class="line">alert(<span class="built_in">isNaN</span>(<span class="string">"10"</span>)); <span class="comment">//false</span></div><div class="line">alert(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">//false(可被转换为1)</span></div><div class="line">alert(<span class="built_in">isNaN</span>(<span class="string">"blue"</span>)); <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">isNaN</span>()也可以用于对象.在基于对象调用时,会首先调用对象的valueof()方法,然后确定该方法的返回值是否可以转换为数值.</div><div class="line">如果不能,则基于这个返回值再调用tostring()方法,在测试返回值.这个过程也是ECMAscript中内置函数操作符的一般执行流程</div></pre></td></tr></table></figure><h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">有三个函数可以吧非数值转换为数值: <span class="built_in">Number</span>() <span class="built_in">parseInt</span>() parsefloat() 第一个适用于任何类型,另两个专门用于把字符串转换为数值</div><div class="line"></div><div class="line"><span class="built_in">Number</span>() </div><div class="line"><span class="number">1</span>:如果是<span class="built_in">Boolean</span>值,<span class="literal">true</span>和<span class="literal">false</span>将分别被转换为<span class="number">1</span>和<span class="number">0</span></div><div class="line"><span class="number">2</span>:如果是数字,只是简单的传入和返回</div><div class="line"><span class="number">3</span>:如果是<span class="literal">null</span>值,返回<span class="number">0</span></div><div class="line"><span class="number">4</span>:如果是<span class="literal">undefined</span>,返回<span class="literal">NaN</span></div><div class="line"><span class="number">5</span>:如果是字符串,则遵循以下规则</div><div class="line">(<span class="number">1</span>):如果字符串只包含数字,则将其转换为十进制(<span class="number">011</span>会转换为<span class="number">11</span>,前导<span class="number">0</span>会被忽略)</div><div class="line">(<span class="number">2</span>):如果字符串中包含浮点格式,则将其转换为浮点格式(忽略前导<span class="number">0</span>)</div><div class="line">(<span class="number">3</span>):如果字符串包含有效的十六进制格式,例如<span class="string">"0xf"</span>,则将其转换为相同大小的十进制整数</div><div class="line">(<span class="number">4</span>):如果字符串是空的,则将其转换为<span class="number">0</span></div><div class="line">(<span class="number">5</span>):如果字符串包含除上述格式之外的字符,则将其转换为<span class="literal">NaN</span></div><div class="line">例:</div><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">Number</span>(<span class="string">"Hello World"</span>) <span class="comment">//NaN</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">Number</span>(<span class="string">""</span>)            <span class="comment">//0</span></div><div class="line"><span class="keyword">var</span> num3 = <span class="built_in">Number</span>(<span class="string">"00000011"</span>)    <span class="comment">//11</span></div><div class="line"><span class="keyword">var</span> num4 = <span class="built_in">Number</span>(<span class="string">"1"</span>)           <span class="comment">//1</span></div><div class="line"></div><div class="line"><span class="built_in">parseInt</span>()</div><div class="line"><span class="number">1</span>:会忽略字符前面的空格,如果第一个字符不是数字字符或者负号会返回<span class="literal">NaN</span>,也就是<span class="built_in">parseInt</span>转换空字符串会返回<span class="literal">NaN</span></div><div class="line"><span class="number">2</span>:会忽略数字后面的非数字字符</div><div class="line"><span class="number">3</span>:会识别各种整数格式(<span class="number">10</span> <span class="number">8</span> <span class="number">16</span> 进制) <span class="number">0</span>x开头且后跟数字 会当做<span class="number">16</span>进制解析 <span class="number">0</span>开头且后跟数字 或当做<span class="number">8</span>进制解析</div><div class="line">例:</div><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>) <span class="comment">//1234</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>() <span class="comment">//NaN</span></div><div class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="number">0XA</span>) <span class="comment">//10(十六进制)</span></div><div class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>) <span class="comment">//22</span></div><div class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="number">070</span>) <span class="comment">//56(八进制)</span></div><div class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseInt</span>(<span class="number">70</span>) <span class="comment">//70(十进制)</span></div><div class="line"><span class="keyword">var</span> num7 = <span class="built_in">parseInt</span>(oxf) <span class="comment">//15(十六进制)</span></div><div class="line"></div><div class="line"><span class="number">070</span> 和<span class="number">70</span> 转换的并不一样,为了消除这种这种问题,ECMAscript提供了第二个参数</div><div class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">"0xAF"</span>,<span class="number">16</span>) <span class="comment">//175以十六进制进行转换</span></div><div class="line">如果指定了<span class="number">16</span>为第二个参数,可以不带<span class="number">0</span>x</div><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"AF"</span>,<span class="number">16</span>); <span class="comment">//175</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">"AF"</span>)  <span class="comment">//NaN</span></div><div class="line">无论在什么情况下都应该明确指定基数</div><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"010"</span>) <span class="comment">//8(按八进制转换)</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"010"</span>,<span class="number">8</span>) <span class="comment">//(按八进制转换)</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"010"</span>,<span class="number">10</span>) <span class="comment">//(按十进制转换)</span></div><div class="line">多数情况下,我们要解析的都是十进制数值,因此始终将<span class="number">10</span>作为第二个参数非常必要的</div><div class="line"><span class="built_in">parseFloat</span>()</div><div class="line"><span class="number">1</span>:解析,第一个小数点有效,第二个小数点无效</div><div class="line"><span class="number">2</span>:始终都会忽略前导的<span class="number">0</span>,且只解析十进制</div><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">"1234blue"</span>); <span class="comment">//1234</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">"oxA"</span>); <span class="comment">//0</span></div><div class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">"22.5"</span>); <span class="comment">//22.5</span></div><div class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">"22.34.5"</span>); <span class="comment">//22.34</span></div><div class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">"0908.5"</span>); <span class="comment">//908.5</span></div><div class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseFloat</span>(<span class="string">"3.125e7"</span>); <span class="comment">//31250000</span></div></pre></td></tr></table></figure><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">字符串可以用单引号或者双引号表示</div><div class="line">转义字符</div><div class="line">\n:换行 \t:制表 \b:空格 \r:回车 \f:进纸 \\:斜杠 \:单引号 \:双引号</div><div class="line"></div><div class="line">转换字符串</div><div class="line">toString()方法</div><div class="line"><span class="keyword">var</span> age = <span class="number">11</span>;</div><div class="line"><span class="keyword">var</span> ageAsString = age.toString(); <span class="comment">//字符串"11"</span></div><div class="line">数值 布尔值 对象和字符串值都有这个方法,单undefied和<span class="literal">null</span>没有</div><div class="line">在调用toString是也可以传递一个方法用来抓换为特定的进制值</div><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</div><div class="line">alert(num.toString()); <span class="comment">//"10"</span></div><div class="line">alert(num.toString(<span class="number">2</span>)); <span class="comment">//"1010"</span></div><div class="line">alert(num.toString(<span class="number">8</span>)); <span class="comment">//"12"</span></div><div class="line">alert(num.toString(<span class="number">10</span>)); <span class="comment">//"10"</span></div><div class="line">alert(num.toString(<span class="number">16</span>)); <span class="comment">//"a"</span></div><div class="line">在不知道要转换的值是不是<span class="literal">null</span>或者<span class="literal">undefined</span>的情况下,可以用<span class="built_in">String</span>()方法,它可以转换任何类型值</div><div class="line">转换规则:</div><div class="line">如果值有toString()方法,则调用该方法(没有参数)并返回相应的值</div><div class="line">如果值是<span class="literal">null</span>,则返回<span class="string">"null"</span></div><div class="line">如果值是<span class="literal">undefined</span>.则返回<span class="string">"undefined"</span></div></pre></td></tr></table></figure><h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ECMAscript中的对象其实就是一组数据和功能的集合.对象可以通过执行<span class="keyword">new</span>操作符后跟要创建的对象名称来创建,二创建<span class="built_in">Object</span>类型的实例,并为其添加属性和方法,就可以创建自定义对象</div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><ul><li>ECMAScript基本数据类型包括: Undefined,Null,Boolean,Number和String</li><li>ECMAScript没有为整数和浮点数分别定义不同的数据类型,Number类型用于表示所有的数值</li><li>Object类型是这门语言所有对象的基础类型</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;h4 id=&quot;typeof-操作符&quot;&gt;&lt;a href=&quot;#typeof-操作符&quot; class=&quot;headerlink&quot; title=&quot;typeof 操作符&quot;&gt;&lt;/a&gt;typeof 操作符&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;操作符&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; :未定义&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;boolean :布尔值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;string :字符串&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;numbert :数字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;object 对象或者&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; :函数&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之前言</title>
    <link href="http://yoursite.com/2017/10/14/JavaScript%E4%B9%8B%E5%89%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2017/10/14/JavaScript之前言/</id>
    <published>2017-10-14T12:26:52.000Z</published>
    <updated>2017-10-14T14:02:12.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript实现"><a href="#javascript实现" class="headerlink" title="javascript实现"></a>javascript实现</h1><h3 id="javascript组成"><a href="#javascript组成" class="headerlink" title="javascript组成"></a>javascript组成</h3><ul><li>核心(ECMAscript)</li><li>文档对象模型(DOM)</li><li>浏览器对象模型(BOM)<a id="more"></a><h3 id="ECMAscript"><a href="#ECMAscript" class="headerlink" title="ECMAscript"></a>ECMAscript</h3>由ECM-262定义的ECMAscript与Web浏览器没有依赖关系,其并不包含输入和输出定义ECMA-262定义的只是这门语言的基础,而在此基础上可以构建更完善的脚本语言.<br>Web浏览器是ECMAscript实现的可能<strong>宿主环境之一</strong>.宿主环境不仅提供基本的实现,同时也会提供该语言的拓展,以便实现语言与环境之间的交互.  类似拓展有DOM,其他宿主环境有Node,Adobe flash等.<br>ECMA262由以下组成:  </li><li>语法 - 类型 - 关键字 - 保留字 - 操作符 - 对象<br>JavaScript实现了ECMAScript</li></ul><h3 id="文档对象模型-DOM"><a href="#文档对象模型-DOM" class="headerlink" title="文档对象模型(DOM)"></a>文档对象模型(DOM)</h3><p>DOM把整个页面映射为一个多层节点结构.<br>HTML或XML页面中每个组成部分都是某种类型的节点,这些节点又包含着不同类型的数据.<br>如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/0LRTMYh.png" alt=""><br>通过这个表示文档的树形图,开发人员可以借助DOM提供的API轻松自在的增删改替任何节点</p><h3 id="浏览器对象模型-BOM"><a href="#浏览器对象模型-BOM" class="headerlink" title="浏览器对象模型(BOM)"></a>浏览器对象模型(BOM)</h3><p>BOM用来处理浏览器的窗口和框架,以及针对浏览器的拓展<br>如下:</p><ul><li>弹出新浏览器窗口的功能</li><li>移动,缩放和关闭浏览器窗口的功能</li><li>提供浏览器详细信息的navigator对象</li><li>提供浏览器所加载页面的详细信息的location对象</li><li>提供用户显示器分辨率详细信息的screen对象</li><li>对cookie的支持</li><li>像XMLHttpRequest和IEActiveXObject这样的自定义对象</li></ul><h3 id="javascript插入位置"><a href="#javascript插入位置" class="headerlink" title="javascript插入位置"></a>javascript插入位置</h3><ol><li>放在<code>&lt;head&gt;</code>标签中,再利用defer属性延迟加载.(延迟加载)</li><li>放在<code>&lt;body&gt;</code>标签内容的后面</li><li>与defer类似,HTML5为<code>&lt;script&gt;</code>元素定义了async属性,且都只适用于外部脚本文件,但不同的是,标记为async的脚本并不能保证按照指定它们的先后顺序执行.<br>所以确保多个JavaScript脚本之间互不依赖非常重要.<br>指定async属性的目的是<strong>不让页面等待多个脚本下载和执行</strong>,从而异步加载页面其他内容.因此,异步脚本不要在加载期间修改DOM  </li></ol><p><strong>异步脚本一定会在页面load事件前执行,但可能会在DOMContentLoaded事件触发之前或之后执行</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><ul><li>ECMAScript由ECMA-262定义,提供核心语言功能</li><li>DOM提供访问和操作页面内容的方法和接口</li><li>BOM提供与浏览器交互的方法和接口</li><li>所有<code>&lt;script&gt;</code>元素会按照他们在页面出现的先后顺序依次被解析,在不使用defer和async的情况下</li><li>defer属性可以让脚本在文档完全呈现后再执行.延迟脚本总是按照指定它们的顺序执行</li><li>async属性可以表示当前脚本不必等待其他脚本,也不必阻塞文档呈现.不能保证异步脚本按照他们在页面出现的顺序执行.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript实现&quot;&gt;&lt;a href=&quot;#javascript实现&quot; class=&quot;headerlink&quot; title=&quot;javascript实现&quot;&gt;&lt;/a&gt;javascript实现&lt;/h1&gt;&lt;h3 id=&quot;javascript组成&quot;&gt;&lt;a href=&quot;#javascript组成&quot; class=&quot;headerlink&quot; title=&quot;javascript组成&quot;&gt;&lt;/a&gt;javascript组成&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;核心(ECMAscript)&lt;/li&gt;
&lt;li&gt;文档对象模型(DOM)&lt;/li&gt;
&lt;li&gt;浏览器对象模型(BOM)
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>个人ui学习整理</title>
    <link href="http://yoursite.com/2017/10/14/%E4%B8%AA%E4%BA%BAui%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/10/14/个人ui学习整理/</id>
    <published>2017-10-14T11:36:58.000Z</published>
    <updated>2017-10-14T12:02:13.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一节-提高手绘"><a href="#第一节-提高手绘" class="headerlink" title="第一节 提高手绘"></a>第一节 提高手绘</h1><p><strong>注意:</strong></p><ol><li>尺子画线</li><li>加立体线</li><li>加斜线阴影</li><li>加阴影</li><li>加阴影横线</li><li>减浅阴影<a id="more"></a></li></ol><h1 id="第二节-布尔运算与锚点"><a href="#第二节-布尔运算与锚点" class="headerlink" title="第二节 布尔运算与锚点"></a>第二节 布尔运算与锚点</h1><h3 id="PS设置"><a href="#PS设置" class="headerlink" title="PS设置"></a>PS设置</h3><ol><li>编辑—首选项—工具—矢量工具变化与像素网格对齐√</li><li>形状：对齐边缘√</li></ol><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol><li>Ctrl+N 新建</li><li>Ctrl+= 放大</li><li>Ctrl+- 缩小</li></ol><h3 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h3><ul><li>合并形状：Ctrl+E</li><li>打开：Ctrl+O</li><li>减去顶层形状：选中什么减去什么</li><li>与形状区域相交：减去不相交部分</li><li>排除重叠形状：减去相交部分</li><li>新建图层：准确新建形状</li></ul><h3 id="齿轮做法"><a href="#齿轮做法" class="headerlink" title="齿轮做法"></a>齿轮做法</h3><p>多边形工具：调整边数，4的倍数（齿轮）<br>选中相隔的两个之后,Ctrl+T调整（齿轮）<br><img src="https://i.imgur.com/RrEwJJ6.png" alt=""></p><h1 id="第三节-微扁平图标绘制"><a href="#第三节-微扁平图标绘制" class="headerlink" title="第三节 微扁平图标绘制"></a>第三节 微扁平图标绘制</h1><ol><li>布尔画出形状</li><li>根据图层样式调出想要的形状</li><li>注意细节</li><li>斜面和浮雕 描边 内阴影 内发光 渐变叠加（叠加才能设置蒙版） 投影</li></ol><h1 id="第四节-中国风创作思路及技法"><a href="#第四节-中国风创作思路及技法" class="headerlink" title="第四节 中国风创作思路及技法"></a>第四节 中国风创作思路及技法</h1><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>确定某样事物</li><li>确定颜色</li><li>材质 质感 特点</li><li>环境因素</li></ol><h3 id="玉器制作需要图层"><a href="#玉器制作需要图层" class="headerlink" title="玉器制作需要图层"></a>玉器制作需要图层</h3><ol><li>主图层：斜面和浮雕，内阴影，内发光  注：（增加凹效果需要浮雕）</li><li>两层阴影，近重远轻（有层次效果），投影</li><li>高光，增强高光反光效果</li><li>反光，增加边缘反光透明度</li><li>内阴影，增加暗部阴影<br>顺序：34512<br><img src="https://i.imgur.com/eNGsMv6.png" alt=""><br><img src="https://i.imgur.com/mB2EYix.png" alt=""></li></ol><h1 id="第五节-透视及纸张质感"><a href="#第五节-透视及纸张质感" class="headerlink" title="第五节 透视及纸张质感"></a>第五节 透视及纸张质感</h1><h3 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h3><h4 id="一点透视"><a href="#一点透视" class="headerlink" title="一点透视"></a>一点透视</h4><p><img src="https://i.imgur.com/KcP4VEn.png" alt=""></p><h4 id="两点透视"><a href="#两点透视" class="headerlink" title="两点透视"></a>两点透视</h4><p><img src="https://i.imgur.com/IJirVIL.png" alt=""><br><img src="https://i.imgur.com/nP2jIm0.png" alt=""></p><h4 id="三点透视"><a href="#三点透视" class="headerlink" title="三点透视"></a>三点透视</h4><p><img src="https://i.imgur.com/39Bc17m.png" alt=""><br><img src="https://i.imgur.com/LW7XCP5.jpg" alt=""></p><h3 id="书本制作步骤"><a href="#书本制作步骤" class="headerlink" title="书本制作步骤"></a>书本制作步骤</h3><ol><li>新建透视形状</li><li>复制一份，下拉</li><li>拉参考线</li><li>侧边上角布尔运算</li><li>侧边新建图层剪切蒙版</li><li>钢笔锚点，书角弯曲细节</li><li>加装饰</li><li>做书页复制最底层</li><li>侧边移到底层上</li><li>底层添加书页，添加锚点</li></ol><h1 id="第六节-重拟物创作思路及技法"><a href="#第六节-重拟物创作思路及技法" class="headerlink" title="第六节 重拟物创作思路及技法"></a>第六节 重拟物创作思路及技法</h1><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>设定元素</li><li>选择元素</li><li>可以改变设计外形</li><li>强化素材材质</li><li>环境因素—明暗对比</li><li>背景颜色与物品要相匹配</li></ol><h3 id="柠檬制作"><a href="#柠檬制作" class="headerlink" title="柠檬制作"></a>柠檬制作</h3><ol><li>画个形状，复制向上移动</li><li>果肉部分，一片果肉，一片材质，如果果肉不明显可对其进行锐化处理</li><li>可以对果肉进行描边，使其过度自然</li><li>皮内部分，皮内边缘材质，皮内暗部</li><li>皮外部分，皮外材质，柠檬皮暗部（两边），柠檬皮亮部（中间）（底部边缘），阴影<br><img src="https://i.imgur.com/HqM7o3P.png" alt=""><h1 id="第七节-银器设计思路及质感"><a href="#第七节-银器设计思路及质感" class="headerlink" title="第七节 银器设计思路及质感"></a>第七节 银器设计思路及质感</h1></li></ol><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><ol><li>利用布尔运算画出雏形，复制一层</li><li>缩进边缘，体现厚度</li><li>斜面浮雕，阴影</li><li>渐变阴影效果</li><li>暗部，细节  </li><li>总结：参照实物，细节重要<br><img src="https://i.imgur.com/EsuT5fk.png" alt=""><h1 id="第八节-金币设计思路及技法"><a href="#第八节-金币设计思路及技法" class="headerlink" title="第八节 金币设计思路及技法"></a>第八节 金币设计思路及技法</h1></li></ol><h3 id="效果分析："><a href="#效果分析：" class="headerlink" title="效果分析："></a>效果分析：</h3><p>投影—渐变叠加（光照渐变）—描边（可做光照效果）—描边—（凹效果）—描边（来光照射效果）—内发光（机枪凹底阴影质感）—<br>外发光（加强凸底散光质感）—描边（加强边缘效果）</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>注重细节  光照效果（重要）  色差对比</p><h3 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h3><ul><li><p>gold（内阴影，内发光）—内阴影突出字体凹效果，内发光加强效果质感</p></li><li><p>五角星顶上高光</p></li><li><p>五角星顶上亮部</p></li><li><p>暗部（五角星暗部）</p></li><li><p>五角星（斜面浮雕，描边，渐变叠加，外发光，投影）—加强周围的效果同步，显示出效果</p></li><li><p>暗部（凹结构的投影暗部)</p></li><li><p>金币凹结构（描边（内），描边（外），）—突出光照与凹效果，内描边体现凹效果，外描边加强光照效果</p></li><li><p>暗部（底部半圆环投影暗部）</p></li><li><p>金币顶层（描边。渐变叠加）—光照渐变效果</p></li><li><p>金币渐变亮部—（顶端灯光照射）</p></li><li><p>金币底（投影）<br><img src="https://i.imgur.com/GGIHQpT.png" alt=""></p></li></ul><h1 id="第九节-毛线质感思路及技法"><a href="#第九节-毛线质感思路及技法" class="headerlink" title="第九节 毛线质感思路及技法"></a>第九节 毛线质感思路及技法</h1><ol><li>制作毛线单个画笔素材<br>（新建图层—圆角矩形—变形共形—调整素材—编辑—定义画笔预设）</li><li>钢笔工具—画好路径<br>（路径—画笔描边路径）</li><li>毛边质感可以用画笔里的小草素材操作</li></ol><h1 id="第十节-图标的制作与规范"><a href="#第十节-图标的制作与规范" class="headerlink" title="第十节 图标的制作与规范"></a>第十节 图标的制作与规范</h1><ol><li>光线，阴影要注意<br>（复制一层，调大羽化可做阴影和光照）<br>（内阴影可用作高光，可不用斜面与浮雕）</li><li>颜色选取不要过于极端   右上（浅色）和左下（深色）<br><img src="https://i.imgur.com/vO1fPp0.png" alt=""></li></ol><h3 id="关于创作"><a href="#关于创作" class="headerlink" title="关于创作"></a>关于创作</h3><ol><li>确定主题</li><li>思考主题范围</li><li>选择元素，制作配色表<br>（艺术来源于现实，多做参考）<br><img src="https://i.imgur.com/KcxwLxx.png" alt=""><br><img src="https://i.imgur.com/8MQaFfL.png" alt=""><br><img src="https://i.imgur.com/3tjSrUc.png" alt=""><br><img src="https://i.imgur.com/gR69AuV.png" alt=""></li></ol><h3 id="关于创意"><a href="#关于创意" class="headerlink" title="关于创意"></a>关于创意</h3><p>多多参考！ 多多参考！ 多多参考！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一节-提高手绘&quot;&gt;&lt;a href=&quot;#第一节-提高手绘&quot; class=&quot;headerlink&quot; title=&quot;第一节 提高手绘&quot;&gt;&lt;/a&gt;第一节 提高手绘&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尺子画线&lt;/li&gt;
&lt;li&gt;加立体线&lt;/li&gt;
&lt;li&gt;加斜线阴影&lt;/li&gt;
&lt;li&gt;加阴影&lt;/li&gt;
&lt;li&gt;加阴影横线&lt;/li&gt;
&lt;li&gt;减浅阴影
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ui" scheme="http://yoursite.com/tags/ui/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
      <category term="photoshop" scheme="http://yoursite.com/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>关于动画</title>
    <link href="http://yoursite.com/2017/10/14/%E5%85%B3%E4%BA%8E%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2017/10/14/关于动画/</id>
    <published>2017-10-14T04:00:53.000Z</published>
    <updated>2017-10-14T07:36:52.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>对于小时候的事情,除了伙伴之间的玩耍,陪伴我时间最长的还是书籍与动画了.  <a id="more"></a><br>记得最早家里是有一个黑白电视的,换台靠的是旋钮,转来转去也就那7,8个台可以看,不过有个台我已经记不清是什么频道了,它每天都会放很多动画,像&lt;&lt;婴儿城&gt;&gt;,&lt;&lt;小蝌蚪找妈妈&gt;&gt;就是这上面看的.<br>之后家里有了彩色的电视机,频道也变的多了,这时候看的很多如&lt;&lt;邋遢大王&gt;&gt;,&lt;&lt;天书奇谈&gt;&gt;,&lt;&lt;海尔兄弟&gt;&gt;,&lt;&lt;葫芦兄弟&gt;&gt;,等等<br>这台电视机贯穿了我整个小学生涯,每天回家后除了作业剩下的事就是电视机了,这期间从国产动画到日本动画.特摄剧,儿童综艺等等,只要是电视上放过的,大多都看过.<br>后来上了初中,这时候电视上开始大面积播放国产低龄向动画.而且随着网络的接触,对于电视兴趣在慢慢的减淡.<br>初中,开始接触ACG文化.这时候看的日本动画,除了一些经典,剩下的基本都是后宫动漫,像&lt;&lt;人形电脑天使心&gt;&gt;&lt;&lt;鹡鸰女神&gt;&gt;,&lt;&lt;出包王女&gt;&gt;,&lt;&lt;我的狐仙女友&gt;&gt;等等.<br>某一天,美术课上,美术老师给我们放了一部电影&lt;&lt;千与千寻&gt;&gt;.第一次,我被震惊到了,我完全被其剧情吸引.放学后我还在回忆.之后开始利用各种方法寻找其相关内容,然后我知道了<strong>宫崎骏</strong>.<br>关于<strong>吉卜力</strong>,那是我整个初中最开心的时刻.<br>一到周末,吃好晚饭,父母都去休息了,而我准备好U盘,里面放上一个吉卜力的电影,准备好一堆零食.把U盘插到电视上.正式开始美好时光.<br>关于吉卜力,从宫崎骏开始,吉卜力没有完结.<br>初一下学期,有了自己的第一部电脑,虽然现在看来配置很低,但它是我接触整个世界的窗口,不止动画.<br>到了高中,可供自由支配的时间越来越少.对于动画也没有以前的那种精力去追更了.开始了”择选”观看.如:&lt;&lt;罪恶王冠&gt;&gt;,&lt;&lt;刀剑神域&gt;&gt;&lt;&lt;圣杯战争&gt;&gt;等等,在电影上主要是新海诚系列..<br>大学,关于动画,是高中生活的延续,对于选择动画的口味也越来越苛刻.不过对于动画的热情与喜爱,永远不会改变.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h2&gt;&lt;p&gt;对于小时候的事情,除了伙伴之间的玩耍,陪伴我时间最长的还是书籍与动画了.
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="记录" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
